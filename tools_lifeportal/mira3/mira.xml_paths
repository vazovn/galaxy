<tool id="mira_assembler" name="Assemble with MIRA v3.4" version="0.0.8">
    <description>Takes Sanger, Roche, Illumina, and Ion Torrent data</description>
    <requirements>
        <requirement type="python-module">Bio</requirement>
        <requirement type="binary">mira</requirement>
        <requirement type="package" version="3.4.1.1">MIRA</requirement>
    </requirements>

    <command interpreter="python">
    
    /cluster/software/galaxy/tools/mira/mira.py /cluster/software/VERSIONS/mira-3.4.0/bin/mira $out_fasta $out_qual $out_ace $out_caf $out_wig $out_log
##Give the wrapper script list of output filenames, then the mira command...
mira --job=$job_method,$job_type,$job_quality

##Input files
#if $condBackbone.use == "true":
    ## Can this be linked to job_method as well? If mapping we need the backbone...
    -SB:lb=1:bft=fasta -FN:bbin=${condBackbone.filename}
#end if
#if $condSanger.use == "true":
    SANGER_SETTINGS
    ## Not easy in Galaxy to add sanger to --job, so use load_sequence_data(lsd) instead
    ## I expect hard trimmed FASTQ files with no NCBI traceinfo XML file
    -LR:lsd=1:mxti=0:ft=fastq -FN:fqi=${condSanger.filename}
#end if
#if $condRoche.use == "true":
    454_SETTINGS
    ## Not easy in Galaxy to add 454 to --job, so use load_sequence_data(lsd) instead
    ## I expect hard trimmed FASTQ files with no NCBI traceinfo XML file
    -LR:lsd=1:mxti=0:ft=fastq -FN:fqi=${condRoche.filename}
#end if
#if $condIllumina.use == "true":
    SOLEXA_SETTINGS
    ## Not easy in Galaxy to add solexa to --job, so use load_sequence_data(lsd) instead
    -LR:lsd=1:ft=fastq -FN:fqi=${condIllumina.filename}
    ##TODO - Look at -LR FASTQ qual offset (fqqo)
#end if
#if $condIonTorrent.use == "true":
    IONTOR_SETTINGS
    ## Not easy in Galaxy to add iontor to --job, so use load_sequence_data(lsd) instead
    ## I expect hard trimmed FASTQ files with no NCBI traceinfo XML file
    -LR:lsd=1:mxti=0:ft=fastq -FN:fqi=${condIonTorrent.filename}
#end if

##Output files
COMMON_SETTINGS

##ignore warnings about long read names
-MI:somrnl=0

##Explicitly request the FASTA (QUAL), CAF, ACE, WIG output
##Explicitly disable formats we won't use like MAF (reduce IO)
-OUT:orf=1:orc=1:ora=1:orw=1:orm=0:org=0:ors=0

##remove_rollover_tmps, remove_tmp_directory
-OUT:rrot=1:rtd=1

##put mira temp directory on local storage                                                                              
-DI:trt=/tmp

    </command>
    <inputs>
        <param name="job_method" type="select" label="Assembly method" help="Mapping mode requires backbone/reference sequence(s)">
            <option value="denovo">De novo</option>
            <option value="mapping">Mapping</option>
        </param>
        <param name="job_type" type="select" label="Assembly type">
            <option value="genome">Genome</option>
            <option value="est">EST (transcriptome)</option>
        </param>
        <param name="job_quality" type="select" label="Assembly quality grade">
            <option value="accurate">Accurate</option>
            <option value="normal">Normal (deprecated)</option>
            <option value="draft">Draft</option>
        </param>
        <!-- Backbone -->
        <conditional name="condBackbone">
           <param name="use" type="select" label="Backbones/reference chromosomes?" help="Required for mapping, optional for de novo assembly.">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <!-- MIRA also allows CAF and GenBank, but Galaxy doesn't define those (yet) -->
              <param name="filename" type="data" format="fasta" label="Backbone/reference sequences" help="FASTA format" />
           </when>
        </conditional>
        <!-- Sanger -->
        <conditional name="condSanger">
           <param name="use" type="select" label="Sanger/Capillary reads?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <param name="filename" type="data" format="fastq" label="Sanger/Capillary reads file" help="FASTQ format" />
           </when>
        </conditional>
        <!-- Roche 454 -->
        <conditional name="condRoche">
           <param name="use" type="select" label="454 reads?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <!-- TODO? Support SFF files directly, e.g. with sff_extract, but will need linker sequences -->
              <param name="filename" type="data" format="fastq" label="Roche 454 reads file" help="FASTQ format" />
           </when>
        </conditional>
        <!-- Illumina -->
        <conditional name="condIllumina">
           <param name="use" type="select" label="Solexa/Illumina reads?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <param name="filename" type="data" format="fastq" label="Solexa/Illumina reads file" help="FASTQ format" />
           </when>
        </conditional>
        <!-- Ion Torrent -->
        <conditional name="condIonTorrent">
           <param name="use" type="select" label="Ion Torrent reads?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <!-- TODO? Support SFF files directly, e.g. with sff_extract -->
              <param name="filename" type="data" format="fastq" label="Ion Torrent reads file" help="FASTQ format" />
           </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="out_fasta" format="fasta" label="MIRA contigs (FASTA)" />
        <data name="out_qual" format="qual454" label="MIRA contigs (QUAL)" />
        <data name="out_caf" format="txt" label="MIRA contigs (CAF)" />
        <data name="out_ace" format="txt" label="MIRA contigs (ACE)" />
        <data name="out_wig" format="wig" label="MIRA coverage (Wiggle)" />
        <data name="out_log" format="txt" label="MIRA log" />
    </outputs>
    <tests>
            <!-- Based on the MIRA v3.4.1.1 bundled minidemo/estdemo2 which uses
                 strain data and miraSearchESTSNPs. Here we just assemble it. --> 
<!--
Commenting out test until Galaxy framework is fixed,
https://trello.com/c/zSTrfDOB/820-disambiguated-conditional-parameters-not-supported-in-unit-tests
        <test>
            <param name="job_method" value="denovo" />
            <param name="job_type" value="est" />
            <param name="job_qual" value="accurate" />
            <param name="condBackbone.use" value="false" />
            <param name="condSanger.use" value="true" />
            <param name="condSanger.filename" value="tvc_mini.fastq" ftype="fastq" />
            <param name="condRoche.use" value="false" />
            <param name="condIllumina.use" value="false" /> 
            <param name="condIonTorrent.use" value="false" />
            <output name="out_fasta" file="tvc_contigs.fasta" ftype="fasta" />
	</test>
-->
    </tests>
    <help>

**What it does**

Runs MIRA v3.4, collects the output, and throws away all the temporary files.

MIRA is an open source assembly tool capable of handling sequence data from
a range of platforms (Sanger capillary, Solexa/Illumina, Roche 454 and also
Ion Torrent).

It is particularly suited to small genomes such as bacteria.

**Citation**

If you use this Galaxy tool in work leading to a scientific publication please
cite the following papers:

Peter J.A. Cock, Björn A. Grüning, Konrad Paszkiewicz and Leighton Pritchard (2013).
Galaxy tools and workflows for sequence analysis with applications
in molecular plant pathology. PeerJ 1:e167
http://dx.doi.org/10.7717/peerj.167

Chevreux et al. (1999).
Genome Sequence Assembly Using Trace Signals and Additional Sequence Information.
Computer Science and Biology: Proceedings of the German Conference on Bioinformatics (GCB) 99, pp. 45-56.

This wrapper is available to install into other Galaxy Instances via the Galaxy
Tool Shed at http://toolshed.g2.bx.psu.edu/view/peterjc/mira_assembler 

    </help>
</tool>
