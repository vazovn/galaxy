<tool id="Migrate" name="Migrate (3.3.2)" version="3.3.2">
  <description>estimates effective population sizes and past migration rates between n population assuming a migration matrix model with asymmetric migration rates and different subpopulation sizes.</description>

  <parallelism method="basic"></parallelism>

  <command>
    #if str( $selinputs.extrainputs) == 'one':
       cp $infile $infile.name;
       cp $parmfile $parmfile.name;
    #else
      #if str($selinputs.parmfile) != "None": 
        cp $parmfile $parmfile.name;
      #end if
      #if str($selinputs.datefile) != "None": 
        cp $datefile $datefile.name;
      #end if
      #if str($selinputs.sumfile) != "None": 
        cp $sumfile $sumfile.name;
      #end if
      #if str($selinputs.bayesallfile) != "None": 
        cp $bayesallfile $bayesallfile.name;
      #end if
      #if str($selinputs.seedfile) != "None": 
        cp $seedfile $seedfile.name;
      #end if
      #if str($selinputs.geofile) != "None": 
        cp $geofile $geofile.name;
      #end if
      #if str($selinputs.distfile) != "None": 
        cp $distfile $distfile.name;
      #end if
      #if str($selinputs.catfile) != "None": 
        cp $catfile $catfile.name;
      #end if
      #if str($selinputs.weightfile) != "None": 
        cp $weightfile $weightfile.name;
      #end if
    #end if

    module load migrate/3.3.2;
    ##migrate-n $parmfile.name > migratestdout;
    mpirun -np 4 migrate-n-mpi $parmfile.name > migratestdout;

    if [ -e "$seloutputs.outfile" ]; then cp $seloutputs.outfile outfile; fi;

    #if str( $seloutputs.extraoutputs) == 'many':
      #if str($seloutputs.pdffile) != "":
         if [ -e "$seloutputs.pdffile" ]; then cp $seloutputs.pdffile lppdffile; fi;
      #end if
      #if str($seloutputs.treefile) != "":
         if [ -e "$seloutputs.treefile" ]; then cp $seloutputs.treefile lptreefile; fi;
      #end if
      #if str($seloutputs.mathfile) != "":
         if [ -e "$seloutputs.mathfile" ]; then cp $seloutputs.mathfile lpmathfile; fi;
      #end if     
      #if str($seloutputs.sumfile) != "":
         if [ -e "$seloutputs.sumfile" ]; then cp $seloutputs.sumfile lpsumfile; fi;
      #end if
      #if str($seloutputs.bayesfile) != "":
         if [ -e "$seloutputs.bayesfile" ]; then cp $seloutputs.bayesfile lpbayesfile; fi;
      #end if
      #if str($seloutputs.bayesallfile) != "":
         if [ -e "$seloutputs.bayesallfile" ]; then cp $seloutputs.bayesallfile lpbayesallfile; fi;
      #end if
      #if str($seloutputs.mighistfile) != "":
         if [ -e "$seloutputs.mighistfile" ]; then cp $seloutputs.mighistfile lpmighistfile; fi;
      #end if
      #if str($seloutputs.skylinefile) != "":
         if [ -e "$seloutputs.skylinefile" ]; then cp $seloutputs.skylinefile lpskylinefile; fi;
      #end if
      #if str($seloutputs.logfile) != "":
         if [ -e "$seloutputs.logfile" ]; then cp $seloutputs.logfile lplogfile; fi;
      #end if
      #if str($seloutputs.parmfile) != "":
         if [ -e "$seloutputs. parmfile" ]; then cp $seloutputs.parmfile lpparmfile; fi;
      #end if

    #end if

    sleep 1
  </command>

  <inputs>

  <conditional name="selinputs">
      <param name="extrainputs" type="select" label="Input files" help="Register all input files (including the ones listed in parmfile).">
            <option value="one">One datafile and parmfile</option>
            <option value="many">Parmfile and multiple data files</option>
      </param>
      <when value="one">
        <param name="infile" type="data" label="Data file (infile)" help="" optional="false" format="txt" />
        <param name="parmfile" type="data" label="Option file (parmfile)" help="" optional="false" format="txt" />      
      </when>
      <when value="many">
        <param name="parmfile" type="data" label="Option file (parmfile)" help="" optional="false" format="txt" />
        <param name="infile" type="data" label="Data file (infile)" help="" optional="false" format="txt" />
        <param name="datefile" type="data" label="Sample date(s) file" help="" optional="True"/>
        <param name="sumfile" type="data" label="Summary statistics file" optional="True"/>
        <param name="bayesallfile" type="data" label="Bayesian inference file" optional="True"/>
        <param name="seedfile" type="data" label="Random seed file" optional="True"/>
        <param name="geofile" type="data" label="Geographic distance matrix file" optional="True"/>
        <param name="distfile" type="data" label="Genetic distance matrix file" optional="True"/>
        <param name="catfile" type="data" label="Categories for mutation rates file" optional="True"/>
        <param name="weightfile" type="data" label="Site weights file" optional="True"/>
      </when>
    </conditional>  

    <conditional name="seloutputs">
      <param name="extraoutputs" type="select" label="Register output files" help="Register all output file names listed in the parmfile.">
            <option value="one">Only one output file</option>
            <option value="many">Multiple output files</option>
      </param>
      <when value="one">
        <param name="outfile" type="text" size="20" value="" label="Output file (outfile)" help="" />
      </when> 
      <when value="many">
        <param name="outfile" type="text" size="20" value="" label="output file (outfile)" help="" />
        <param name="pdffile" type="text" size="20" value="" label="pdf outfile (optional)" help="" optional="True"  />
        <param name="treefile" type="text" size="20" value="" label="treefile (optional)" help="" optional="True" />
        <param name="mathfile" type="text" size="20" value="" label="mathfile (optional)" help="" optional="True" />        
        <param name="sumfile" type="text" size="20" value="" label="sumfile (optional)" help="" optional="True" />
        <param name="bayesfile" type="text" size="20" value="" label="bayesfile (optional)" help="" optional="True" />
        <param name="bayesallfile" type="text" size="20" value="" label="bayesallfile (optional)" help="" optional="True" />
        <param name="mighistfile" type="text" size="20" value="" label="mighistfile (optional)" help="" optional="True" />
        <param name="skylinefile" type="text" size="20" value="" label="skylinefile (optional)" help="" optional="True" />
        <param name="logfile" type="text" size="20" value="" label="logfile (optional)" help="" optional="True" />
        <param name="parmfile" type="text" size="20" value="" label="parmfile (optional)" help="" optional="True" />
      </when> 
     </conditional>

  </inputs>

  <outputs>
    <data format="txt" name="stdout" label="Migrate on ${selinputs.infile.name} - on ${selinputs.infile.name} - stdout" from_work_dir="migratestdout" /> 
    <data format="txt" name="outfile" label="Migrate on ${selinputs.infile.name} - outfile" from_work_dir="lpoutfile" />
    <data format="txt" name="pdffile" label="Migrate on ${selinputs.infile.name} - pdffile" from_work_dir="lppdffile">
       <filter>(seloutputs['pdffile'] != "")</filter>
    </data>
    <data format="txt" name="treefile" label="Migrate on ${selinputs.infile.name} - treefile" from_work_dir="lptreefile">
       <filter>(seloutputs['treefile'] != "")</filter>
    </data>
    <data format="txt" name="mathfile" label="Migrate on ${selinputs.infile.name} - mathfile" from_work_dir="lpmathfile">
       <filter>(seloutputs['mathfile'] != "")</filter>
    </data>
    <data format="txt" name="sumfile" label="Migrate on ${selinputs.infile.name} - sumfile" from_work_dir="lpsumfile">
       <filter>(seloutputs['sumfile'] != "")</filter>
    </data>
    <data format="txt" name="bayesfile" label="Migrate on ${selinputs.infile.name} - bayesfile" from_work_dir="lpbayesfile">
       <filter>(seloutputs['bayesfile'] != "")</filter>
    </data>
    <data format="txt" name="bayesallfile" label="Migrate on ${selinputs.infile.name} - bayesallfile" from_work_dir="lpbayesallfile">
       <filter>(seloutputs['bayesallfile'] != "")</filter>
    </data>
    <data format="txt" name="mighistfile" label="Migrate on ${selinputs.infile.name} - mighistfile" from_work_dir="lpmighistfile">
       <filter>(seloutputs['mighistfile'] != "")</filter>
    </data>
    <data format="txt" name="skylinefile" label="Migrate on ${selinputs.infile.name} - skylinefile" from_work_dir="lpskylinefile">
       <filter>(seloutputs['skylinefile'] != "")</filter>
    </data>
    <data format="txt" name="logfile" label="Migrate on ${selinputs.infile.name} - logfile" from_work_dir="lplogfile">
       <filter>(seloutputs['logfile'] != "")</filter>
    </data>
    <data format="txt" name="parmfile" label="Migrate on ${selinputs.infile.name} - parmfile" from_work_dir="lpparmfile">
       <filter>(seloutputs['parmfile'] != "")</filter>
    </data>

  </outputs>

  <help>

**Job parameters**

Migrate is an MPI applications - use 4 for Number of CPUs


**About MIGRATE**

Migrate estimates effective population sizes and past migration rates between n population assuming a migration matrix model with asymmetric migration rates and different subpopulation sizes. Migrate uses maximum likelihood or Bayesian inference to jointly estimate all parameters. It can use the following data types:

-Sequence data using Felsenstein's 84 model with or without site rate variation

-Single nucleotide polymorphism data (sequence-like data input, HAPMAP-like data input)

-Microsatellite data using a stepwise mutation model or a brownian motion mutation model (using the repeatlength input format or the fragment-length input format)

-Electrophoretic data using an 'infinite' allele model.


The output can contain: Estimates of all migration rates and all population sizes, assuming constant mutation rates among loci or a gamma distributed mutation rate among loci. Profile likelihood tables, Percentiles, Likelihood-ratio tests, and simple plots of the log-likelihood surfaces for all populations and all loci.


**Input**: Options file (parmfile) or data file (infile) 

**Home page**: http://popgen.sc.fsu.edu/Migrate/Migrate-n.html

**Quick start**: http://popgen.sc.fsu.edu/Migrate/Tutorials/Tutorials.html


**Note**: The "menu" option in parmfile has to be set to "NO" for Galaxy execution

**Citation:** 

Beerli, P. (2009) How to use migrate and why are markov chain monte carlo programs difficult to use? In Population Genetics for Animal Conservation: Giorgio Bertorelle, Michael W. Bruford, Heidi C. Hauffe, Annapaolo Rizzoli, Cristiano Vernesi, Conservation Biology, volume 17, pages 42-79, Cambridge University Press, Cambridge UK, 2009


                                    
  </help>
</tool>
