<tool id="minimus" name="Minimus (Amos 3.1.0)" version="3.1.0">

  <description>assembly pipeline designed specifically for small data-sets.</description>

  <command>
     module load galaxy-scripts;
     module load amos/3.1.0;

     #if str( $prefix ) == "":
       #set $prefix = "lpmus"
     #end if


     #if str( $selinputs.infiles) == 'afg':
       cp $afgfile ${prefix}.afg;
       ###runAmos -C /cluster/software/VERSIONS/amos-3.1.0/bin/minimus -D TGT=$afgfile $prefix;    
       minimus $prefix;
     #end if 
 
    #if str( $selinputs.infiles) == 'seq':
     toAmos 
       -s $seqfile 
     #if str($selinputs.qualfile) != "None":   
       -q $qualfile    
     #end if
     #if str( $selinputs.badqual ) != '':
       -gq $selinputs.badqual
     #end if
     #if str( $selinputs.goodqual ) != '':
      -bq $selinputs.goodqual
     #end if
      -o ${prefix}.afg;

    ####runAmos -C /cluster/software/VERSIONS/amos-3.1.0/bin/minimus -D TGT=${prefix}.afg  $prefix;
    minimus $prefix;
    #end if
  
    tar --exclude='*galaxy*' -cvf minimus_results.tar *;

    if [ -e "${prefix}.runAmos.log" ];
    then cp ${prefix}.runAmos.log log;
    fi;

    if [ -e "${prefix}.fasta" ];
    then cp ${prefix}.fasta fasta;
    fi;
     
    if [ -e "${prefix}.contig" ];
    then cp ${prefix}.contig contig;
    fi;
    
    sleep 1

  </command>

  <requirements>
    <requirement type="binary">Amos</requirement>
  </requirements>

  <inputs> 
   <param name="prefix" type="text" size="20" label="Project name" optional="false" help="The name becomes a prefix for all output files." />
    <conditional name="selinputs">
      <param name="infiles" type="select" label="Input files" help="">
            <option value="afg">Amos formatted</option>
            <option value="seq">Reads and scores</option>
      </param>
      <when value="afg">
        <param name="afgfile" type="data" label="Amos formatted file" optional="false" format="txt" />
      </when>
      <when value="seq">
        <param name="seqfile" type="data" label="FASTA file" optional="false" format="txt" />
        <param name="qualfile" type="data" label="Quality scores" optional="true"/>

        <param name="badqual" type="integer" value="" size="8" label="Minimum quality score for high-quality bases" optional="true"/>
        <param name="goodqual" type="integer" value="" size="8" label="Maximum quality score for low-quality bases" optional="true"/>
        
      </when>
    </conditional>  

    
  </inputs>

  <outputs>
    <data format="tar" name="allres" label="Minimus results for ${prefix}"  from_work_dir="minimus_results.tar"/>
    <data format="txt" name="fasta" label="${prefix}.fasta"  from_work_dir="fasta"/>
    <data format="txt" name="contig" label="${prefix}.contig"  from_work_dir="contig"/>
    <data format="txt" name="log" label="${prefix}.log"  from_work_dir="log"/>
  </outputs>

  <help>
**What it does**

Minimus is one of several assembly pipelines included in the AMOS software package. It is designed specifically for small data-sets, such as the set of reads covering a specific gene. Note that the code will work for larger assemblies (we have used it to assemble bacterial genomes), however, due to its stringency, the resulting assembly will be highly fragmented. For large and/or complex assemblies the execution of Minimus should be followed by additional processing steps, such as scaffolding.

Minimus follows the Overlap-Layout-Consensus paradigm and consists of three main modules which share information through a central file bank:

hash-overlap - Computes the overlaps between the reads using a modified version of the Smith-Waterman local alignment algorithm

tigger - Uses the read overlaps to generate the layouts of reads representing individual contigs

make-consensus - Refines the layouts produced by the tigger to generate accurate multiple alignments within the reads

**Input**: Either a file in Amos format (afg) or a FASTA sequence file and an optional quality scores file.

**Output**: Contig file, FASTA file, log file and an archive with all results including the bnk directory.

**Home page**: http://amos.sourceforge.net/wiki/index.php/Minimus


**Documentation**: http://amos.sourceforge.net/wiki/index.php/Minimus/README
  </help>
</tool>
